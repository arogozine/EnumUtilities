<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnumUtilities</name>
    </assembly>
    <members>
        <member name="T:EnumUtilities.EnumCompiledCache`1">
            <summary>
            Uses Linq Expressions to compile Enum functions
            
            (c) Alexandre Rogozine 2016
            </summary>
            <typeparam name="TEnum">Enum Type</typeparam>
        </member>
        <member name="T:EnumUtilities.EnumUtil`1">
            <summary>
            Enum Utilities.
            
            Provides type safe Enum extension methods
            by "bypassing" .NET restrictions.
            </summary>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetUnderlyingType">
            <summary>
            Returns the underlying type of the specified enumeration.        
            Wrapper for <seealso cref="M:System.Enum.GetUnderlyingType(System.Type)"/>
            </summary>
            <returns>The underlying type of T.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.Parse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            Wrapper for <seealso cref="M:System.Enum.Parse(System.Type,System.String)"/>
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type T whose value is represented by value.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetName(`0)">
            <summary>
            Returns the Name of a certain Enum Value.
            Wrapper for <seealso cref="M:System.Enum.GetName(System.Type,System.Object)"/>
            </summary>
            <param name="value">An enumeration value</param>
            <returns>Name of the enum value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.QuickParse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type T whose value is represented by value.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.
            Wrapper for <seealso cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)"/>
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>An object of type T whose value is represented by value.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValues">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.        
            Wrapper for <seealso cref="M:System.Enum.GetValues(System.Type)"/>
            </summary>
            <returns>An array that contains the values of the constants in T.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetNames">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.        
            Wrapper for <seealso cref="M:System.Enum.GetNames(System.Type)"/>
            </summary>
            <returns>A string array of the names of the constants in T.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            Wrapper for <seealso cref="M:System.Enum.TryParse``1(System.String,``0@)"/>
            </summary>
            <param name="value">
            The string representation of the enumeration name or underlying value to convert.
            </param>
            <param name="result">Contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds</param>
            <returns>
            true if the value parameter was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive.
            The return value indicates whether the conversion succeeded.
            <seealso cref="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)"/>
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <param name="result">Contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds</param>
            <returns>true if the value parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.BitwiseOr(`0,`0)">
            <summary>
            Bitwise OR
            </summary>
            <param name="left">An enumeration value</param>
            <param name="right">An enumeration value</param>
            <returns><c>left | right</c></returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.BitwiseAnd(`0,`0)">
            <summary>
            Bitwise AND
            </summary>
            <param name="left">An enumeration value</param>
            <param name="right">An enumeration value</param>
            <returns><c>left &amp; right</c></returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.BitwiseExclusiveOr(`0,`0)">
            <summary>
            Bitwise Exclusive OR
            </summary>
            <param name="left">An enumeration value</param>
            <param name="right">An enumeration value</param>
            <returns><c>left ^ right</c></returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.BitwiseNot(`0)">
            <summary>
            Bitwise NOT
            </summary>
            <param name="value">An enumeration value</param>
            <returns><c>~value</c></returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.HasFlag(`0,`0)">
            <summary>
            Checks whether a flag exists.
            This function does not check for <c>FlagsAttribute</c>.
            </summary>
            <param name="value">An enumeration value</param>
            <param name="flag">An enumeration value</param>
            <returns>
            true if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.SetFlag(`0,`0)">
            <summary>
            Returns the result of bitwise or between the passed in value and flag.
            </summary>
            <param name="value">An enumeration value</param>
            <param name="flag">An enumeration value</param>
            <returns>Value with the specified flag set</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.UnsetFlag(`0,`0)">
            <summary>
            Returns the result of bitwise and for value and bitwise not of the flag.
            </summary>
            <param name="value">An enumeration value</param>
            <param name="flag">An enumeration value</param>
            <returns>Value with the specified flag unset</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToggleFlag(`0,`0)">
            <summary>
            Returns the result of bitwise exclusive or for the value and the flag.
            </summary>
            <param name="value">An enumeration value</param>
            <param name="flag">An enumeration value</param>
            <returns>Value with the specified flag toggled</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToggleFlag(`0,`0,System.Boolean)">
            <summary>
            Sets or Unsets a specified flag.
            </summary>
            <param name="value">An enumeration value</param>
            <param name="flag">An enumeration value</param>
            <param name="flagSet">true to set and false to unset</param>
            <returns>Value with the specified flag toggled</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(`0)">
            <summary>
            Checks if the value is valid for the enum.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
            true if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              <para>
                For the sake of providing a typesafe API alternative to <c>Enum.IsDefined(typeof(E), value)</c>.
              </para>
            </remarks>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.String)">
            <summary>
            Returns an indication whether a constant with a specified name exists in a specified
            enumeration.
            </summary>
            <param name="name">An enumeration value</param>
            <returns>
            <c>true</c> if <paramref name="name"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name"/> is null
            </exception>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.SByte)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Byte)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.UInt16)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Int16)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Int32)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.UInt32)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Int64)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.UInt64)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified
            enumeration.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Single)">
            <summary>
            Returns an idication whether a constant with a specified value exists in a specified
            enumeration
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.IsDefined(System.Double)">
            <summary>
            Returns an idication whether a constant with a specified value exists in a specified
            enumeration
            </summary>
            <param name="value">An enumeration value</param>
            <returns>
                <c>true</c> if <paramref name="value"/> is valid for <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromByte(System.Byte)">
            <summary>
            Converts a byte to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromSByte(System.SByte)">
            <summary>
            Converts a sbyte to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromInt16(System.Int16)">
            <summary>
            Converts a short to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromUInt16(System.UInt16)">
            <summary>
            Converts a ushort to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromInt32(System.Int32)">
            <summary>
            Converts an int to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromUInt32(System.UInt32)">
            <summary>
            Converts a uint to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromInt64(System.Int64)">
            <summary>
            Converts a long to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromUInt64(System.UInt64)">
            <summary>
            Converts a ulong to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromSingle(System.Single)">
            <summary>
            Converts a float to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.FromDouble(System.Double)">
            <summary>
            Converts a double to a specified enumeration <typeparamref name="TEnum"/>
            </summary>
            <param name="value">value to convert</param>
            <returns><paramref name="value"/> as the enumeration type</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToByte(`0)">
            <summary>
            Converts the value of the specified enumeration to a byte.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>An 8-bit signed integer that is equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToSByte(`0)">
            <summary>
            Converts the value of the specified enumeration to a signed byte.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>An 8-bit unsigned integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToInt16(`0)">
            <summary>
            Converts the value of the specified enumeration to a short.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 16-bit signed integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToUInt16(`0)">
            <summary>
            Converts the value of the specified enumeration to an unsigned short.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 16-bit unsigned integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToInt32(`0)">
            <summary>
            Converts the value of the specified enumeration to an int.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 32-bit signed integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToUInt32(`0)">
            <summary>
            Converts the value of the specified enumeration to an unsigned int.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 32-bit unsigned integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToInt64(`0)">
            <summary>
            Converts the value of the specified enumeration to a long.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 64-bit signed integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToUInt64(`0)">
            <summary>
            Converts the value of the specified enumeration to an unsigned long.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A 64-bit unsigned integer that is cast equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToSingle(`0)">
            <summary>
            Converts the value of the specified enumeration to a float.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A single precision floating point number that is case equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.ToDouble(`0)">
            <summary>
            Converts the value of the specified enumeration to a double.
            </summary>
            <param name="value">An enumeration value</param>
            <returns>A double precision floating point number that is case equivalent to the enumeration value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetAttribute``1">
            <summary>
            Retrieves a specific attribute on the enumeration type
            </summary>
            <typeparam name="Y">Attribute to Retrieve</typeparam>
            <returns>Custom Attribute on the Enum</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetAttributes``1">
            <summary>
            Retrieves a specific attributes on the Enum
            </summary>
            <typeparam name="Y">Attributes to Retrieve</typeparam>
            <returns>Custom Attributes on the Enum</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetAttribute``1(`0)">
            <summary>
            Retrieves a specific attribute on an enum value
            </summary>
            <typeparam name="Y">Attribute Type</typeparam>
            <param name="value">Enum Value with the Attribute</param>
            <returns>Attribute Y on the enum value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetAttributes``1(`0)">
            <summary>
            Retrieves specific attributes on an enum value
            </summary>
            <typeparam name="Y">Attribute Type</typeparam>
            <param name="value">Enum Value with Attributes</param>
            <returns>Attributes on the enum value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.HasAttribute``1">
            <summary>
            Tells whether the Enum has a specific attribute.
            </summary>
            <typeparam name="Y">An enumeration type</typeparam>
            <returns>Whether or not the enum has a certain attribute</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.HasFlagsAttribute">
            <summary>
            Returns whether or not the Enum has the FlagsAttribute
            </summary>
            <returns>Whether or not the Enum has FlagsAttribute</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetEnumFields">
            <summary>
            Returns FieldInfo array for the enumeration.
            </summary>
            <returns>FieldInfo Array for the defined values in the Enumeration</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueDescription">
            <summary>
            Generates a Dictionary of enumeration value to DescriptionAttribute.
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>
            </summary>
            <returns>Map of enumeration value to its description</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueNameDescription">
            <summary>
            Generates a Dictionary of enum value to name and the description attribute.
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>
            </summary>
            <returns>Map of enumeration value to name and description</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueNameAttributes">
            <summary>
            Generates a Dictionary of enum value to enum name and attributes
            </summary>
            <returns>Map of value to name and attributes</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetNameValueAttribute``1">
            <summary>
            Generates a Dictionary of Enum Value to Enum Value and Attribute
            </summary>
            <typeparam name="Y">The type of attribute</typeparam>
            <returns>Map of name to value and attribute</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueNameAttribute``1">
            <summary>
            Generates a Dictionary of Enum Value to Name and Attribute
            </summary>
            <typeparam name="Y">The type of attribute</typeparam>
            <returns>Map of value to name and attribute</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueAttribute``1">
            <summary>
            Generates a Dictionary of Enum Value to Attribute Y
            </summary>
            <typeparam name="Y">The type of attribute</typeparam>
            <returns>Map of value to attribute</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetNameValue">
            <summary>
            Generates a Dictionary of Enum Name to Enum Value
            </summary>
            <returns>Map of name to value</returns>
        </member>
        <member name="M:EnumUtilities.EnumUtil`1.GetValueName">
            <summary>
            Generates a Dictionary of Enum Value to Enum Name
            </summary>
            <returns>Map of value to name</returns>
        </member>
        <member name="T:EnumUtilities.NameAttribute`1">
            <summary>
            Holds a Name and an Attribute for a specific enumeration.
            </summary>
            <typeparam name="Y">An Attribute Type</typeparam>
        </member>
        <member name="F:EnumUtilities.NameAttribute`1.Name">
            <summary>
            Name for the enumeration value.
            </summary>
        </member>
        <member name="F:EnumUtilities.NameAttribute`1.Attribute">
            <summary>
            Attribute associated with the enumeration value.
            </summary>
        </member>
        <member name="T:EnumUtilities.ValueAttribute`2">
            <summary>
            Hold the Value and the Attribute for a specific enumeration.
            </summary>
            <typeparam name="T">Enumeration type</typeparam>
            <typeparam name="Y">Attribute type</typeparam>
        </member>
        <member name="F:EnumUtilities.ValueAttribute`2.Value">
            <summary>
            Enumeration Value
            </summary>
        </member>
        <member name="F:EnumUtilities.ValueAttribute`2.Attribute">
            <summary>
            Enumeration Attribute
            </summary>
        </member>
    </members>
</doc>
